phase2_start_service_processes() called -- currently a NOP
phase3_start_service_processes() called -- currently a NOP
phase4_start_service_processes() called -- currently a NOP
phase5_start_service_processes() called -- currently a NOP
testcase_main(): started
EXPECTATION: testcase_main() creates a single 'victim' process XXp3(); it has the same priority as testcase_main().  It then creates N other processes XXp2(), all at higher priority; each one interrupts testcase_main() until it blocks.  Each of these increments a global variable counter, and then blocks attempting to zap() the victim.  Each time that another XXp2() process blocks, testcase_main() and XXp3() race; if XXp3() runs, it does nothing (yet); if testcase_main() runs it creates another child.  At some point, when all of the XXp2() processes have run, and thus the global counter is at the expected value, then (whenever it happens to win the race next) XXp3() will exit its silent while() loop and terminate.  This will wake up all of the zap()ping processes, which will also terminate; then testcase_main() will clean it all up.
testcase_main(): fork1 creating child i=0 -- a new child will run next
XXp2() 0: getpid()=5
XXp2() 0: zapping XXp3    current count: 1
XXp3(): started.  Entering the while() loop.
testcase_main(): fork1 has completed, pid=5
testcase_main(): fork1 creating child i=1 -- a new child will run next
XXp2() 1: getpid()=6
XXp2() 1: zapping XXp3    current count: 2
testcase_main(): fork1 has completed, pid=6
testcase_main(): fork1 creating child i=2 -- a new child will run next
XXp2() 2: getpid()=7
XXp2() 2: zapping XXp3    current count: 3
testcase_main(): fork1 has completed, pid=7
testcase_main(): fork1 creating child i=3 -- a new child will run next
XXp2() 3: getpid()=8
XXp2() 3: zapping XXp3    current count: 4
testcase_main(): fork1 has completed, pid=8
testcase_main(): fork1 creating child i=4 -- a new child will run next
XXp2() 4: getpid()=9
XXp2() 4: zapping XXp3    current count: 5
testcase_main(): fork1 has completed, pid=9
testcase_main(): fork1 creating child i=5 -- a new child will run next
XXp2() 5: getpid()=10
XXp2() 5: zapping XXp3    current count: 6
testcase_main(): fork1 has completed, pid=10
testcase_main(): fork1 creating child i=6 -- a new child will run next
XXp2() 6: getpid()=11
XXp2() 6: zapping XXp3    current count: 7
testcase_main(): fork1 has completed, pid=11
testcase_main(): fork1 creating child i=7 -- a new child will run next
XXp2() 7: getpid()=12
XXp2() 7: zapping XXp3    current count: 8
testcase_main(): fork1 has completed, pid=12
testcase_main(): fork1 creating child i=8 -- a new child will run next
XXp2() 8: getpid()=13
XXp2() 8: zapping XXp3    current count: 9
testcase_main(): fork1 has completed, pid=13
testcase_main(): fork1 creating child i=9 -- a new child will run next
XXp2() 9: getpid()=14
XXp2() 9: zapping XXp3    current count: 10
XXp3(): count = 10 -- the while loop has ended!
XXp3(): terminating -- all of the XXp2() processes will unblock, and will all run in quick succession.  testcase_main() will not run until all of them have died.
XXp2() 9: after zap.  This process will now terminate.
XXp2() 8: after zap.  This process will now terminate.
XXp2() 7: after zap.  This process will now terminate.
XXp2() 6: after zap.  This process will now terminate.
XXp2() 5: after zap.  This process will now terminate.
XXp2() 4: after zap.  This process will now terminate.
XXp2() 3: after zap.  This process will now terminate.
XXp2() 2: after zap.  This process will now terminate.
XXp2() 1: after zap.  This process will now terminate.
XXp2() 0: after zap.  This process will now terminate.
testcase_main(): fork1 has completed, pid=14
testcase_main(): Calling join() the first time.  Depending on how the race with XXp3() runs, this may happen before XXp3() ends its loop, and thus it will block; or it may happen after XXp3() terminates, and thus it will terminate immediately - as will *all* of the join()s, since all of the XXp2() processes will also be dead.
testcase_main: join() returned pid 14 status 3
testcase_main: join() returned pid 13 status 3
testcase_main: join() returned pid 12 status 3
testcase_main: join() returned pid 11 status 3
testcase_main: join() returned pid 10 status 3
testcase_main: join() returned pid 9 status 3
testcase_main: join() returned pid 8 status 3
testcase_main: join() returned pid 7 status 3
testcase_main: join() returned pid 6 status 3
testcase_main: join() returned pid 5 status 3
testcase_main: join() returned pid 4 status 4
TESTCASE ENDED: Call counts:   check_io() 0   clockHandler() 45
